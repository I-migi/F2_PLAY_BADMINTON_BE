name: Build and Deploy

on:
  push:
    branches:
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.determine_changes.outputs.api }}
      batch: ${{ steps.determine_changes.outputs.batch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Determine changed modules
        id: determine_changes
        run: |
          BASE_BRANCH=deploy-test
          
          git fetch --prune --unshallow origin $BASE_BRANCH --tags

          if git rev-parse --quiet --verify "origin/$BASE_BRANCH~1"; then
            PREVIOUS_COMMIT=$(git rev-parse origin/$BASE_BRANCH~1) 
          else
            echo "No previous commit found for branch $BASE_BRANCH."
            exit 0
          fi
          CURRENT_COMMIT=$(git rev-parse origin/$BASE_BRANCH)

          # Check for changes in api and domain/infrastructure
          if git diff --name-only $PREVIOUS_COMMIT $CURRENT_COMMIT | grep -E '^api/|^domain/|^infrastructure/'; then
            echo "::set-output name=api::true"
          else
            echo "::set-output name=api::false"
          fi
          
          # Check for changes in batch
          if git diff --name-only $PREVIOUS_COMMIT $CURRENT_COMMIT | grep -E '^batch/'; then
            echo "::set-output name=batch::true"
          else
            echo "::set-output name=batch::false"
          fi

      - name: Set environment values for badminton-api
        if: steps.determine_changes.outputs.api == 'true'
        run: |
          cd ./api/src/main/resources
          touch ./.env
          echo "${{ secrets.ENV }}" > ./.env
        shell: bash

      - name: Generate logback.xml for badminton-api
        if: steps.determine_changes.outputs.api == 'true'
        run: |
          cd ./api/src/main/resources
          cat <<EOF > logback.xml
          ${{ secrets.LOGBACK_API }}
          EOF
        shell: bash

      - name: Set environment values for badminton-batch
        if: steps.determine_changes.outputs.batch == 'true'
        run: |
          cd ./batch/src/main/resources
          touch ./.env
          echo '${{ secrets.ENV }}' > ./.env
        shell: bash

      - name: Generate logback.xml for badminton-batch
        if: steps.determine_changes.outputs.batch == 'true'
        run: |
          cd ./batch/src/main/resources
          cat <<EOF > logback.xml
          ${{ secrets.LOGBACK_BATCH }}
          EOF
        shell: bash

      - name: Set Gradle Wrapper Permissions
        run: chmod +x ./gradlew

      - name: Build badminton-api
        if: steps.determine_changes.outputs.api == 'true'
        run: ./gradlew :api:assemble

      - name: Build badminton-batch
        if: steps.determine_changes.outputs.batch == 'true'
        run: ./gradlew :batch:assemble

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and push Docker image for badminton-api
        if: steps.determine_changes.outputs.api == 'true'
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker-compose build badminton-api
          docker-compose push badminton-api

      - name: Build and push Docker image for badminton-batch
        if: steps.determine_changes.outputs.batch == 'true'
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker-compose build badminton-batch
          docker-compose push badminton-batch

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Test SSH connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_DNS }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Testing SSH connection"

      - name: SSH and deploy updated modules
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PUBLIC_DNS }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Docker Hub에 로그인"
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            echo "API flag: ${{ needs.build.outputs.api }}"
            echo "Batch flag: ${{ needs.build.outputs.batch }}"
            
            if [[ "${{ needs.build.outputs.api }}" == "true" ]]; then
              echo "badminton-api 서비스 업데이트"
              sudo docker-compose pull badminton-api
              sudo docker-compose up -d badminton-api
            fi

            if [[ "${{ needs.build.outputs.batch }}" == "true" ]]; then
              echo "badminton-batch 서비스 업데이트"
              sudo docker-compose pull badminton-batch
              sudo docker-compose up -d badminton-batch
            fi

            echo "오래된 Docker 이미지 정리"
            sudo docker image prune -f
